
TESTE_FULL_SENSORS_22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003230  08003230  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003230  08003230  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003230  08003230  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000004  0800323c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800323c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fee2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f62  00000000  00000000  0002ff0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  00031e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000de0a  00000000  00000000  00033478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e4d  00000000  00000000  00041282  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004ae6b  00000000  00000000  0004b0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00095f3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  00095fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031d8 	.word	0x080031d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080031d8 	.word	0x080031d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <HAL_Init+0x24>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <HAL_Init+0x24>)
 800040e:	2110      	movs	r1, #16
 8000410:	430a      	orrs	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f809 	bl	800042c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800041a:	f002 fd15 	bl	8002e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800041e:	2300      	movs	r3, #0
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	40022000 	.word	0x40022000

0800042c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000434:	f001 fad6 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8000438:	0002      	movs	r2, r0
 800043a:	23fa      	movs	r3, #250	; 0xfa
 800043c:	0099      	lsls	r1, r3, #2
 800043e:	0010      	movs	r0, r2
 8000440:	f7ff fe6a 	bl	8000118 <__udivsi3>
 8000444:	0003      	movs	r3, r0
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fd0b 	bl	8000e62 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800044c:	6879      	ldr	r1, [r7, #4]
 800044e:	2301      	movs	r3, #1
 8000450:	425b      	negs	r3, r3
 8000452:	2200      	movs	r2, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fcdf 	bl	8000e18 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800045a:	2300      	movs	r3, #0
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}

08000464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  uwTick++;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <HAL_IncTick+0x14>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	4b02      	ldr	r3, [pc, #8]	; (8000478 <HAL_IncTick+0x14>)
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000028 	.word	0x20000028

0800047c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  return uwTick;
 8000480:	4b02      	ldr	r3, [pc, #8]	; (800048c <HAL_GetTick+0x10>)
 8000482:	681b      	ldr	r3, [r3, #0]
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	20000028 	.word	0x20000028

08000490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000498:	f7ff fff0 	bl	800047c <HAL_GetTick>
 800049c:	0003      	movs	r3, r0
 800049e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3301      	adds	r3, #1
 80004a8:	d002      	beq.n	80004b0 <HAL_Delay+0x20>
  {
     wait++;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	f7ff ffe3 	bl	800047c <HAL_GetTick>
 80004b6:	0002      	movs	r2, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d8f7      	bhi.n	80004b2 <HAL_Delay+0x22>
  {
  }
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b004      	add	sp, #16
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004d4:	230f      	movs	r3, #15
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80004dc:	2300      	movs	r3, #0
 80004de:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e124      	b.n	8000734 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d10a      	bne.n	8000508 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2240      	movs	r2, #64	; 0x40
 80004fc:	2100      	movs	r1, #0
 80004fe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fcc4 	bl	8002e90 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050c:	2210      	movs	r2, #16
 800050e:	4013      	ands	r3, r2
 8000510:	d000      	beq.n	8000514 <HAL_ADC_Init+0x48>
 8000512:	e102      	b.n	800071a <HAL_ADC_Init+0x24e>
 8000514:	230f      	movs	r3, #15
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d000      	beq.n	8000520 <HAL_ADC_Init+0x54>
 800051e:	e0fc      	b.n	800071a <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2204      	movs	r2, #4
 8000528:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800052a:	d000      	beq.n	800052e <HAL_ADC_Init+0x62>
 800052c:	e0f5      	b.n	800071a <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000532:	4a82      	ldr	r2, [pc, #520]	; (800073c <HAL_ADC_Init+0x270>)
 8000534:	4013      	ands	r3, r2
 8000536:	2202      	movs	r2, #2
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	2203      	movs	r2, #3
 8000546:	4013      	ands	r3, r2
 8000548:	2b01      	cmp	r3, #1
 800054a:	d112      	bne.n	8000572 <HAL_ADC_Init+0xa6>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	2b01      	cmp	r3, #1
 8000558:	d009      	beq.n	800056e <HAL_ADC_Init+0xa2>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	021b      	lsls	r3, r3, #8
 8000564:	401a      	ands	r2, r3
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	021b      	lsls	r3, r3, #8
 800056a:	429a      	cmp	r2, r3
 800056c:	d101      	bne.n	8000572 <HAL_ADC_Init+0xa6>
 800056e:	2301      	movs	r3, #1
 8000570:	e000      	b.n	8000574 <HAL_ADC_Init+0xa8>
 8000572:	2300      	movs	r3, #0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d116      	bne.n	80005a6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	2218      	movs	r2, #24
 8000580:	4393      	bics	r3, r2
 8000582:	0019      	movs	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689a      	ldr	r2, [r3, #8]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	430a      	orrs	r2, r1
 800058e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	0899      	lsrs	r1, r3, #2
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4963      	ldr	r1, [pc, #396]	; (8000740 <HAL_ADC_Init+0x274>)
 80005b2:	400a      	ands	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80005c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80005ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d002      	beq.n	80005da <HAL_ADC_Init+0x10e>
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	015b      	lsls	r3, r3, #5
 80005d8:	e000      	b.n	80005dc <HAL_ADC_Init+0x110>
 80005da:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80005dc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80005e2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d101      	bne.n	80005f0 <HAL_ADC_Init+0x124>
 80005ec:	2304      	movs	r3, #4
 80005ee:	e000      	b.n	80005f2 <HAL_ADC_Init+0x126>
 80005f0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80005f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005fa:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	4313      	orrs	r3, r2
 8000600:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	2b01      	cmp	r3, #1
 8000608:	d115      	bne.n	8000636 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6a1b      	ldr	r3, [r3, #32]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d105      	bne.n	800061e <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	0252      	lsls	r2, r2, #9
 8000618:	4313      	orrs	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	e00b      	b.n	8000636 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	2220      	movs	r2, #32
 8000624:	431a      	orrs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800062e:	2201      	movs	r2, #1
 8000630:	431a      	orrs	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800063a:	23c2      	movs	r3, #194	; 0xc2
 800063c:	33ff      	adds	r3, #255	; 0xff
 800063e:	429a      	cmp	r2, r3
 8000640:	d007      	beq.n	8000652 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800064a:	4313      	orrs	r3, r2
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4313      	orrs	r3, r2
 8000650:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	68d9      	ldr	r1, [r3, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	430a      	orrs	r2, r1
 8000660:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	055b      	lsls	r3, r3, #21
 800066a:	429a      	cmp	r2, r3
 800066c:	d01b      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000672:	2b01      	cmp	r3, #1
 8000674:	d017      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067a:	2b02      	cmp	r3, #2
 800067c:	d013      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000682:	2b03      	cmp	r3, #3
 8000684:	d00f      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800068a:	2b04      	cmp	r3, #4
 800068c:	d00b      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000692:	2b05      	cmp	r3, #5
 8000694:	d007      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800069a:	2b06      	cmp	r3, #6
 800069c:	d003      	beq.n	80006a6 <HAL_ADC_Init+0x1da>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006a2:	2b07      	cmp	r3, #7
 80006a4:	d112      	bne.n	80006cc <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2107      	movs	r1, #7
 80006b2:	438a      	bics	r2, r1
 80006b4:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6959      	ldr	r1, [r3, #20]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006c0:	2207      	movs	r2, #7
 80006c2:	401a      	ands	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <HAL_ADC_Init+0x278>)
 80006d4:	4013      	ands	r3, r2
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d10b      	bne.n	80006f4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	2203      	movs	r2, #3
 80006e8:	4393      	bics	r3, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80006f2:	e01c      	b.n	800072e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f8:	2212      	movs	r2, #18
 80006fa:	4393      	bics	r3, r2
 80006fc:	2210      	movs	r2, #16
 80006fe:	431a      	orrs	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000708:	2201      	movs	r2, #1
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000710:	230f      	movs	r3, #15
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000718:	e009      	b.n	800072e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	2210      	movs	r2, #16
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000726:	230f      	movs	r3, #15
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800072e:	230f      	movs	r3, #15
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b004      	add	sp, #16
 800073a:	bd80      	pop	{r7, pc}
 800073c:	fffffefd 	.word	0xfffffefd
 8000740:	fffe0219 	.word	0xfffe0219
 8000744:	833fffe7 	.word	0x833fffe7

08000748 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	d138      	bne.n	80007d6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	5c9b      	ldrb	r3, [r3, r2]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d101      	bne.n	8000772 <HAL_ADC_Start+0x2a>
 800076e:	2302      	movs	r3, #2
 8000770:	e038      	b.n	80007e4 <HAL_ADC_Start+0x9c>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	2101      	movs	r1, #1
 8000778:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d007      	beq.n	8000792 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000782:	230f      	movs	r3, #15
 8000784:	18fc      	adds	r4, r7, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	0018      	movs	r0, r3
 800078a:	f000 f973 	bl	8000a74 <ADC_Enable>
 800078e:	0003      	movs	r3, r0
 8000790:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000792:	230f      	movs	r3, #15
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d120      	bne.n	80007de <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_ADC_Start+0xa4>)
 80007a2:	4013      	ands	r3, r2
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	2100      	movs	r1, #0
 80007ba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	221c      	movs	r2, #28
 80007c2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2104      	movs	r1, #4
 80007d0:	430a      	orrs	r2, r1
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	e003      	b.n	80007de <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80007d6:	230f      	movs	r3, #15
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2202      	movs	r2, #2
 80007dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	781b      	ldrb	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b005      	add	sp, #20
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	fffff0fe 	.word	0xfffff0fe

080007f0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80007f0:	b5b0      	push	{r4, r5, r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007f8:	230f      	movs	r3, #15
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2240      	movs	r2, #64	; 0x40
 8000804:	5c9b      	ldrb	r3, [r3, r2]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <HAL_ADC_Stop+0x1e>
 800080a:	2302      	movs	r3, #2
 800080c:	e02a      	b.n	8000864 <HAL_ADC_Stop+0x74>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2240      	movs	r2, #64	; 0x40
 8000812:	2101      	movs	r1, #1
 8000814:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000816:	250f      	movs	r5, #15
 8000818:	197c      	adds	r4, r7, r5
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fa0e 	bl	8000c3e <ADC_ConversionStop>
 8000822:	0003      	movs	r3, r0
 8000824:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000826:	197b      	adds	r3, r7, r5
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d113      	bne.n	8000856 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800082e:	250f      	movs	r5, #15
 8000830:	197c      	adds	r4, r7, r5
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	0018      	movs	r0, r3
 8000836:	f000 f999 	bl	8000b6c <ADC_Disable>
 800083a:	0003      	movs	r3, r0
 800083c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800083e:	197b      	adds	r3, r7, r5
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d107      	bne.n	8000856 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_ADC_Stop+0x7c>)
 800084c:	4013      	ands	r3, r2
 800084e:	2201      	movs	r2, #1
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2240      	movs	r2, #64	; 0x40
 800085a:	2100      	movs	r1, #0
 800085c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800085e:	230f      	movs	r3, #15
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bdb0      	pop	{r4, r5, r7, pc}
 800086c:	fffffefe 	.word	0xfffffefe

08000870 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	055b      	lsls	r3, r3, #21
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d011      	beq.n	80008ce <HAL_ADC_ConfigChannel+0x46>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d00d      	beq.n	80008ce <HAL_ADC_ConfigChannel+0x46>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d009      	beq.n	80008ce <HAL_ADC_ConfigChannel+0x46>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d005      	beq.n	80008ce <HAL_ADC_ConfigChannel+0x46>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_ConfigChannel+0x46>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	5c9b      	ldrb	r3, [r3, r2]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d101      	bne.n	80008dc <HAL_ADC_ConfigChannel+0x54>
 80008d8:	2302      	movs	r3, #2
 80008da:	e0bb      	b.n	8000a54 <HAL_ADC_ConfigChannel+0x1cc>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2240      	movs	r2, #64	; 0x40
 80008e0:	2101      	movs	r1, #1
 80008e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2204      	movs	r2, #4
 80008ec:	4013      	ands	r3, r2
 80008ee:	d000      	beq.n	80008f2 <HAL_ADC_ConfigChannel+0x6a>
 80008f0:	e09f      	b.n	8000a32 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4a59      	ldr	r2, [pc, #356]	; (8000a5c <HAL_ADC_ConfigChannel+0x1d4>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d100      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x76>
 80008fc:	e077      	b.n	80009ee <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	409a      	lsls	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	430a      	orrs	r2, r1
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	055b      	lsls	r3, r3, #21
 800091c:	429a      	cmp	r2, r3
 800091e:	d037      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000924:	2b01      	cmp	r3, #1
 8000926:	d033      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800092c:	2b02      	cmp	r3, #2
 800092e:	d02f      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000934:	2b03      	cmp	r3, #3
 8000936:	d02b      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093c:	2b04      	cmp	r3, #4
 800093e:	d027      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000944:	2b05      	cmp	r3, #5
 8000946:	d023      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094c:	2b06      	cmp	r3, #6
 800094e:	d01f      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000954:	2b07      	cmp	r3, #7
 8000956:	d01b      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	2107      	movs	r1, #7
 8000964:	400b      	ands	r3, r1
 8000966:	429a      	cmp	r2, r3
 8000968:	d012      	beq.n	8000990 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2107      	movs	r1, #7
 8000976:	438a      	bics	r2, r1
 8000978:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6959      	ldr	r1, [r3, #20]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	2207      	movs	r2, #7
 8000986:	401a      	ands	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b10      	cmp	r3, #16
 8000996:	d003      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0x118>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b11      	cmp	r3, #17
 800099e:	d152      	bne.n	8000a46 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <HAL_ADC_ConfigChannel+0x1d8>)
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b10      	cmp	r3, #16
 80009aa:	d102      	bne.n	80009b2 <HAL_ADC_ConfigChannel+0x12a>
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	041b      	lsls	r3, r3, #16
 80009b0:	e001      	b.n	80009b6 <HAL_ADC_ConfigChannel+0x12e>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <HAL_ADC_ConfigChannel+0x1d8>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b10      	cmp	r3, #16
 80009c2:	d140      	bne.n	8000a46 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_ADC_ConfigChannel+0x1dc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4927      	ldr	r1, [pc, #156]	; (8000a68 <HAL_ADC_ConfigChannel+0x1e0>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fba4 	bl	8000118 <__udivsi3>
 80009d0:	0003      	movs	r3, r0
 80009d2:	001a      	movs	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009de:	e002      	b.n	80009e6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f9      	bne.n	80009e0 <HAL_ADC_ConfigChannel+0x158>
 80009ec:	e02b      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	4099      	lsls	r1, r3
 80009fc:	000b      	movs	r3, r1
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	400a      	ands	r2, r1
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b10      	cmp	r3, #16
 8000a0e:	d003      	beq.n	8000a18 <HAL_ADC_ConfigChannel+0x190>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b11      	cmp	r3, #17
 8000a16:	d116      	bne.n	8000a46 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_ADC_ConfigChannel+0x1d8>)
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b10      	cmp	r3, #16
 8000a22:	d101      	bne.n	8000a28 <HAL_ADC_ConfigChannel+0x1a0>
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_ADC_ConfigChannel+0x1e4>)
 8000a26:	e000      	b.n	8000a2a <HAL_ADC_ConfigChannel+0x1a2>
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <HAL_ADC_ConfigChannel+0x1e8>)
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_ADC_ConfigChannel+0x1d8>)
 8000a2c:	400a      	ands	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e009      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	2220      	movs	r2, #32
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	781b      	ldrb	r3, [r3, #0]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	00001001 	.word	0x00001001
 8000a60:	40012708 	.word	0x40012708
 8000a64:	20000000 	.word	0x20000000
 8000a68:	000f4240 	.word	0x000f4240
 8000a6c:	ff7fffff 	.word	0xff7fffff
 8000a70:	ffbfffff 	.word	0xffbfffff

08000a74 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d112      	bne.n	8000ab8 <ADC_Enable+0x44>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d009      	beq.n	8000ab4 <ADC_Enable+0x40>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	401a      	ands	r2, r3
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d101      	bne.n	8000ab8 <ADC_Enable+0x44>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <ADC_Enable+0x46>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d14b      	bne.n	8000b56 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <ADC_Enable+0xec>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	d00d      	beq.n	8000ae6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	2210      	movs	r2, #16
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	2201      	movs	r2, #1
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e038      	b.n	8000b58 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <ADC_Enable+0xf0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	491b      	ldr	r1, [pc, #108]	; (8000b68 <ADC_Enable+0xf4>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fb0b 	bl	8000118 <__udivsi3>
 8000b02:	0003      	movs	r3, r0
 8000b04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000b06:	e002      	b.n	8000b0e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f9      	bne.n	8000b08 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b14:	f7ff fcb2 	bl	800047c <HAL_GetTick>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b1c:	e014      	b.n	8000b48 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000b1e:	f7ff fcad 	bl	800047c <HAL_GetTick>
 8000b22:	0002      	movs	r2, r0
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d90d      	bls.n	8000b48 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	2210      	movs	r2, #16
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e007      	b.n	8000b58 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d1e3      	bne.n	8000b1e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b004      	add	sp, #16
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	80000017 	.word	0x80000017
 8000b64:	20000000 	.word	0x20000000
 8000b68:	000f4240 	.word	0x000f4240

08000b6c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2203      	movs	r2, #3
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d112      	bne.n	8000bac <ADC_Disable+0x40>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d009      	beq.n	8000ba8 <ADC_Disable+0x3c>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d101      	bne.n	8000bac <ADC_Disable+0x40>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <ADC_Disable+0x42>
 8000bac:	2300      	movs	r3, #0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d040      	beq.n	8000c34 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2205      	movs	r2, #5
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d110      	bne.n	8000be2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2102      	movs	r1, #2
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bd8:	f7ff fc50 	bl	800047c <HAL_GetTick>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000be0:	e022      	b.n	8000c28 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	2210      	movs	r2, #16
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e01b      	b.n	8000c36 <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bfe:	f7ff fc3d 	bl	800047c <HAL_GetTick>
 8000c02:	0002      	movs	r2, r0
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d90d      	bls.n	8000c28 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	2210      	movs	r2, #16
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e006      	b.n	8000c36 <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	d1e4      	bne.n	8000bfe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2204      	movs	r2, #4
 8000c52:	4013      	ands	r3, r2
 8000c54:	d033      	beq.n	8000cbe <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d00d      	beq.n	8000c7e <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000c6c:	d107      	bne.n	8000c7e <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2110      	movs	r1, #16
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c7e:	f7ff fbfd 	bl	800047c <HAL_GetTick>
 8000c82:	0003      	movs	r3, r0
 8000c84:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000c86:	e014      	b.n	8000cb2 <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000c88:	f7ff fbf8 	bl	800047c <HAL_GetTick>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d90d      	bls.n	8000cb2 <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e006      	b.n	8000cc0 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d1e4      	bne.n	8000c88 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	231f      	movs	r3, #31
 8000cdc:	401a      	ands	r2, r3
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <NVIC_EnableIRQ+0x28>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4091      	lsls	r1, r2
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b7f      	cmp	r3, #127	; 0x7f
 8000d08:	d932      	bls.n	8000d70 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <NVIC_SetPriority+0xd4>)
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0019      	movs	r1, r3
 8000d12:	230f      	movs	r3, #15
 8000d14:	400b      	ands	r3, r1
 8000d16:	3b08      	subs	r3, #8
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3306      	adds	r3, #6
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	18d3      	adds	r3, r2, r3
 8000d20:	3304      	adds	r3, #4
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1dfa      	adds	r2, r7, #7
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	0011      	movs	r1, r2
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	00d2      	lsls	r2, r2, #3
 8000d30:	21ff      	movs	r1, #255	; 0xff
 8000d32:	4091      	lsls	r1, r2
 8000d34:	000a      	movs	r2, r1
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	401a      	ands	r2, r3
 8000d3a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	019b      	lsls	r3, r3, #6
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	401a      	ands	r2, r3
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	4003      	ands	r3, r0
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d52:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <NVIC_SetPriority+0xd4>)
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001c      	movs	r4, r3
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	4023      	ands	r3, r4
 8000d5e:	3b08      	subs	r3, #8
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	430a      	orrs	r2, r1
 8000d64:	3306      	adds	r3, #6
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	18c3      	adds	r3, r0, r3
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d6e:	e027      	b.n	8000dc0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <NVIC_SetPriority+0xd8>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	33c0      	adds	r3, #192	; 0xc0
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	589b      	ldr	r3, [r3, r2]
 8000d80:	1dfa      	adds	r2, r7, #7
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	0011      	movs	r1, r2
 8000d86:	2203      	movs	r2, #3
 8000d88:	400a      	ands	r2, r1
 8000d8a:	00d2      	lsls	r2, r2, #3
 8000d8c:	21ff      	movs	r1, #255	; 0xff
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	401a      	ands	r2, r3
 8000d96:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	019b      	lsls	r3, r3, #6
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	401a      	ands	r2, r3
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	0018      	movs	r0, r3
 8000da6:	2303      	movs	r3, #3
 8000da8:	4003      	ands	r3, r0
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <NVIC_SetPriority+0xd8>)
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	430a      	orrs	r2, r1
 8000dba:	33c0      	adds	r3, #192	; 0xc0
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	501a      	str	r2, [r3, r0]
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <SysTick_Config+0x40>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d901      	bls.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e010      	b.n	8000e08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <SysTick_Config+0x44>)
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	3a01      	subs	r2, #1
 8000dec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	2103      	movs	r1, #3
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff7d 	bl	8000cf4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SysTick_Config+0x44>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x44>)
 8000e02:	2207      	movs	r2, #7
 8000e04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	00ffffff 	.word	0x00ffffff
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	210f      	movs	r1, #15
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	1c02      	adds	r2, r0, #0
 8000e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <NVIC_SetPriority>
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	0002      	movs	r2, r0
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff37 	bl	8000cc8 <NVIC_EnableIRQ>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ffaf 	bl	8000dd0 <SysTick_Config>
 8000e72:	0003      	movs	r3, r0
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e92:	e14f      	b.n	8001134 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_GPIO_Init+0x30>
 8000eaa:	e140      	b.n	800112e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b12      	cmp	r3, #18
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	58d3      	ldr	r3, [r2, r3]
 8000ec8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2207      	movs	r2, #7
 8000ece:	4013      	ands	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2107      	movs	r1, #7
 8000ee8:	400b      	ands	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	409a      	lsls	r2, r3
 8000eee:	0013      	movs	r3, r2
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	43da      	mvns	r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d00b      	beq.n	8000f58 <HAL_GPIO_Init+0xdc>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4c:	2b11      	cmp	r3, #17
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b12      	cmp	r3, #18
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	055b      	lsls	r3, r3, #21
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x17c>
 8000ff6:	e09a      	b.n	800112e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b54      	ldr	r3, [pc, #336]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	619a      	str	r2, [r3, #24]
 8001004:	4b51      	ldr	r3, [pc, #324]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x2d4>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	589b      	ldr	r3, [r3, r2]
 800101c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	2390      	movs	r3, #144	; 0x90
 8001038:	05db      	lsls	r3, r3, #23
 800103a:	429a      	cmp	r2, r3
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1ea>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a44      	ldr	r2, [pc, #272]	; (8001154 <HAL_GPIO_Init+0x2d8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1e6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a43      	ldr	r2, [pc, #268]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1e2>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a42      	ldr	r2, [pc, #264]	; (800115c <HAL_GPIO_Init+0x2e0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1de>
 8001056:	2303      	movs	r3, #3
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x1ec>
 800105a:	2305      	movs	r3, #5
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x1ec>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x1ec>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x1ec>
 8001066:	2300      	movs	r3, #0
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	2103      	movs	r1, #3
 800106c:	400a      	ands	r2, r1
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	; (8001150 <HAL_GPIO_Init+0x2d4>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	025b      	lsls	r3, r3, #9
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	4013      	ands	r3, r2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	035b      	lsls	r3, r3, #13
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	039b      	lsls	r3, r3, #14
 800111c:	4013      	ands	r3, r2
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	40da      	lsrs	r2, r3
 800113c:	1e13      	subs	r3, r2, #0
 800113e:	d000      	beq.n	8001142 <HAL_GPIO_Init+0x2c6>
 8001140:	e6a8      	b.n	8000e94 <HAL_GPIO_Init+0x18>
  } 
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b006      	add	sp, #24
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x18>
 800117a:	e08d      	b.n	8001298 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117c:	4bc3      	ldr	r3, [pc, #780]	; (800148c <HAL_RCC_OscConfig+0x328>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	220c      	movs	r2, #12
 8001182:	4013      	ands	r3, r2
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00e      	beq.n	80011a6 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4bc0      	ldr	r3, [pc, #768]	; (800148c <HAL_RCC_OscConfig+0x328>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	220c      	movs	r2, #12
 800118e:	4013      	ands	r3, r2
 8001190:	2b08      	cmp	r3, #8
 8001192:	d116      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
 8001194:	4bbd      	ldr	r3, [pc, #756]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	401a      	ands	r2, r3
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d10d      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4bb9      	ldr	r3, [pc, #740]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x50>
 80011b2:	e070      	b.n	8001296 <HAL_RCC_OscConfig+0x132>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d000      	beq.n	80011be <HAL_RCC_OscConfig+0x5a>
 80011bc:	e06b      	b.n	8001296 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e2b6      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d107      	bne.n	80011da <HAL_RCC_OscConfig+0x76>
 80011ca:	4bb0      	ldr	r3, [pc, #704]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4baf      	ldr	r3, [pc, #700]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0249      	lsls	r1, r1, #9
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e02f      	b.n	800123a <HAL_RCC_OscConfig+0xd6>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x98>
 80011e2:	4baa      	ldr	r3, [pc, #680]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba9      	ldr	r3, [pc, #676]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011e8:	49a9      	ldr	r1, [pc, #676]	; (8001490 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	4ba7      	ldr	r3, [pc, #668]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4ba6      	ldr	r3, [pc, #664]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80011f4:	49a7      	ldr	r1, [pc, #668]	; (8001494 <HAL_RCC_OscConfig+0x330>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0xd6>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10e      	bne.n	8001222 <HAL_RCC_OscConfig+0xbe>
 8001204:	4ba1      	ldr	r3, [pc, #644]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4ba0      	ldr	r3, [pc, #640]	; (800148c <HAL_RCC_OscConfig+0x328>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	02c9      	lsls	r1, r1, #11
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	4b9e      	ldr	r3, [pc, #632]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b9d      	ldr	r3, [pc, #628]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0249      	lsls	r1, r1, #9
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e00b      	b.n	800123a <HAL_RCC_OscConfig+0xd6>
 8001222:	4b9a      	ldr	r3, [pc, #616]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b99      	ldr	r3, [pc, #612]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001228:	4999      	ldr	r1, [pc, #612]	; (8001490 <HAL_RCC_OscConfig+0x32c>)
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4b97      	ldr	r3, [pc, #604]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b96      	ldr	r3, [pc, #600]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001234:	4997      	ldr	r1, [pc, #604]	; (8001494 <HAL_RCC_OscConfig+0x330>)
 8001236:	400a      	ands	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d014      	beq.n	800126c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff f91b 	bl	800047c <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff f916 	bl	800047c <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e268      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b8b      	ldr	r3, [pc, #556]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	029b      	lsls	r3, r3, #10
 8001266:	4013      	ands	r3, r2
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xe8>
 800126a:	e015      	b.n	8001298 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff f906 	bl	800047c <HAL_GetTick>
 8001270:	0003      	movs	r3, r0
 8001272:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff f901 	bl	800047c <HAL_GetTick>
 800127a:	0002      	movs	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e253      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001288:	4b80      	ldr	r3, [pc, #512]	; (800148c <HAL_RCC_OscConfig+0x328>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	029b      	lsls	r3, r3, #10
 8001290:	4013      	ands	r3, r2
 8001292:	d1f0      	bne.n	8001276 <HAL_RCC_OscConfig+0x112>
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d100      	bne.n	80012a4 <HAL_RCC_OscConfig+0x140>
 80012a2:	e069      	b.n	8001378 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a4:	4b79      	ldr	r3, [pc, #484]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	220c      	movs	r2, #12
 80012aa:	4013      	ands	r3, r2
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	220c      	movs	r2, #12
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x190>
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	025b      	lsls	r3, r3, #9
 80012c2:	4013      	ands	r3, r2
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x178>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e229      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b6b      	ldr	r3, [pc, #428]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	22f8      	movs	r2, #248	; 0xf8
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00da      	lsls	r2, r3, #3
 80012ec:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e041      	b.n	8001378 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d024      	beq.n	8001346 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001302:	2101      	movs	r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff f8b8 	bl	800047c <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff f8b3 	bl	800047c <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e205      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d0f1      	beq.n	8001312 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b57      	ldr	r3, [pc, #348]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22f8      	movs	r2, #248	; 0xf8
 8001334:	4393      	bics	r3, r2
 8001336:	0019      	movs	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	00da      	lsls	r2, r3, #3
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b50      	ldr	r3, [pc, #320]	; (800148c <HAL_RCC_OscConfig+0x328>)
 800134c:	2101      	movs	r1, #1
 800134e:	438a      	bics	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff f893 	bl	800047c <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff f88e 	bl	800047c <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1e0      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d1f1      	bne.n	800135c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2208      	movs	r2, #8
 800137e:	4013      	ands	r3, r2
 8001380:	d036      	beq.n	80013f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <HAL_RCC_OscConfig+0x328>)
 800138c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff f871 	bl	800047c <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff f86c 	bl	800047c <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1be      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f1      	beq.n	80013a0 <HAL_RCC_OscConfig+0x23c>
 80013bc:	e018      	b.n	80013f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80013c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	438a      	bics	r2, r1
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff f857 	bl	800047c <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff f852 	bl	800047c <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1a4      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_RCC_OscConfig+0x328>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1f1      	bne.n	80013d4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2204      	movs	r2, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d100      	bne.n	80013fc <HAL_RCC_OscConfig+0x298>
 80013fa:	e0b5      	b.n	8001568 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fc:	2317      	movs	r3, #23
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	4013      	ands	r3, r2
 800140e:	d111      	bne.n	8001434 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0549      	lsls	r1, r1, #21
 800141a:	430a      	orrs	r2, r1
 800141c:	61da      	str	r2, [r3, #28]
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	055b      	lsls	r3, r3, #21
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800142c:	2317      	movs	r3, #23
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_RCC_OscConfig+0x334>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4013      	ands	r3, r2
 800143e:	d11a      	bne.n	8001476 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x334>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_RCC_OscConfig+0x334>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0049      	lsls	r1, r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff f815 	bl	800047c <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001458:	f7ff f810 	bl	800047c <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e162      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x334>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4013      	ands	r3, r2
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10e      	bne.n	800149c <HAL_RCC_OscConfig+0x338>
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001480:	6a1a      	ldr	r2, [r3, #32]
 8001482:	4b02      	ldr	r3, [pc, #8]	; (800148c <HAL_RCC_OscConfig+0x328>)
 8001484:	2101      	movs	r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	621a      	str	r2, [r3, #32]
 800148a:	e035      	b.n	80014f8 <HAL_RCC_OscConfig+0x394>
 800148c:	40021000 	.word	0x40021000
 8001490:	fffeffff 	.word	0xfffeffff
 8001494:	fffbffff 	.word	0xfffbffff
 8001498:	40007000 	.word	0x40007000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x35a>
 80014a4:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	4ba3      	ldr	r3, [pc, #652]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]
 80014b0:	4ba1      	ldr	r3, [pc, #644]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	438a      	bics	r2, r1
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x394>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x37c>
 80014c6:	4b9c      	ldr	r3, [pc, #624]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014c8:	6a1a      	ldr	r2, [r3, #32]
 80014ca:	4b9b      	ldr	r3, [pc, #620]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014cc:	2104      	movs	r1, #4
 80014ce:	430a      	orrs	r2, r1
 80014d0:	621a      	str	r2, [r3, #32]
 80014d2:	4b99      	ldr	r3, [pc, #612]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	4b98      	ldr	r3, [pc, #608]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	621a      	str	r2, [r3, #32]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x394>
 80014e0:	4b95      	ldr	r3, [pc, #596]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	4b94      	ldr	r3, [pc, #592]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	621a      	str	r2, [r3, #32]
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014ee:	6a1a      	ldr	r2, [r3, #32]
 80014f0:	4b91      	ldr	r3, [pc, #580]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	438a      	bics	r2, r1
 80014f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7fe ffbc 	bl	800047c <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e009      	b.n	800151e <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7fe ffb7 	bl	800047c <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a89      	ldr	r2, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x5d8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e108      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	4b86      	ldr	r3, [pc, #536]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x3a6>
 8001528:	e013      	b.n	8001552 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7fe ffa7 	bl	800047c <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001532:	e009      	b.n	8001548 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7fe ffa2 	bl	800047c <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a7f      	ldr	r2, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x5d8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0f3      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001552:	2317      	movs	r3, #23
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001562:	4977      	ldr	r1, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x5dc>)
 8001564:	400a      	ands	r2, r1
 8001566:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2210      	movs	r2, #16
 800156e:	4013      	ands	r3, r2
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d12a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800157a:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800157c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001580:	2104      	movs	r1, #4
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001586:	4b6c      	ldr	r3, [pc, #432]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7fe ff73 	bl	800047c <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800159c:	f7fe ff6e 	bl	800047c <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0c0      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ae:	4b62      	ldr	r3, [pc, #392]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f1      	beq.n	800159c <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015b8:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	22f8      	movs	r2, #248	; 0xf8
 80015be:	4393      	bics	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	00da      	lsls	r2, r3, #3
 80015c8:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
 80015ce:	e034      	b.n	800163a <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	3305      	adds	r3, #5
 80015d6:	d111      	bne.n	80015fc <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015d8:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015dc:	4b56      	ldr	r3, [pc, #344]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015de:	2104      	movs	r1, #4
 80015e0:	438a      	bics	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	22f8      	movs	r2, #248	; 0xf8
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	00da      	lsls	r2, r3, #3
 80015f4:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	e01e      	b.n	800163a <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015fc:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80015fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001602:	2104      	movs	r1, #4
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800160a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800160e:	2101      	movs	r1, #1
 8001610:	438a      	bics	r2, r1
 8001612:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7fe ff32 	bl	800047c <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800161e:	f7fe ff2d 	bl	800047c <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e07f      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001630:	4b41      	ldr	r3, [pc, #260]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d1f1      	bne.n	800161e <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d100      	bne.n	8001644 <HAL_RCC_OscConfig+0x4e0>
 8001642:	e074      	b.n	800172e <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	220c      	movs	r2, #12
 800164a:	4013      	ands	r3, r2
 800164c:	2b08      	cmp	r3, #8
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x4ee>
 8001650:	e06b      	b.n	800172a <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d14c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001660:	4938      	ldr	r1, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x5e0>)
 8001662:	400a      	ands	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7fe ff09 	bl	800047c <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7fe ff04 	bl	800047c <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e056      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	220f      	movs	r2, #15
 8001694:	4393      	bics	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800169e:	430a      	orrs	r2, r1
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x5e4>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	431a      	orrs	r2, r3
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0449      	lsls	r1, r1, #17
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7fe fed7 	bl	800047c <HAL_GetTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7fe fed2 	bl	800047c <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e024      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	049b      	lsls	r3, r3, #18
 80016ee:	4013      	ands	r3, r2
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x570>
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 80016fa:	4912      	ldr	r1, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x5e0>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7fe febc 	bl	800047c <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7fe feb7 	bl	800047c <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e009      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x5d4>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	049b      	lsls	r3, r3, #18
 8001724:	4013      	ands	r3, r2
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x5a6>
 8001728:	e001      	b.n	800172e <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b006      	add	sp, #24
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	00001388 	.word	0x00001388
 8001740:	efffffff 	.word	0xefffffff
 8001744:	feffffff 	.word	0xfeffffff
 8001748:	ffc2ffff 	.word	0xffc2ffff

0800174c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800175a:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d911      	bls.n	800178c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001768:	4b66      	ldr	r3, [pc, #408]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800177a:	4b62      	ldr	r3, [pc, #392]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b6      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	22f0      	movs	r2, #240	; 0xf0
 800179c:	4393      	bics	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b58      	ldr	r3, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x6a>
 80017b4:	e067      	b.n	8001886 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b52      	ldr	r3, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d114      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e095      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	049b      	lsls	r3, r3, #18
 80017de:	4013      	ands	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e089      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b48      	ldr	r3, [pc, #288]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e082      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2203      	movs	r2, #3
 80017fa:	4393      	bics	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7fe fe38 	bl	800047c <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d111      	bne.n	800183c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	e009      	b.n	800182e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181a:	f7fe fe2f 	bl	800047c <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	4a39      	ldr	r2, [pc, #228]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e065      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	220c      	movs	r2, #12
 8001834:	4013      	ands	r3, r2
 8001836:	2b04      	cmp	r3, #4
 8001838:	d1ef      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
 800183a:	e024      	b.n	8001886 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d11b      	bne.n	800187c <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001844:	e009      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001846:	f7fe fe19 	bl	800047c <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	220c      	movs	r2, #12
 8001860:	4013      	ands	r3, r2
 8001862:	2b08      	cmp	r3, #8
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_ClockConfig+0xfa>
 8001866:	e00e      	b.n	8001886 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7fe fe08 	bl	800047c <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03e      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d211      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e020      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2204      	movs	r2, #4
 80018be:	4013      	ands	r3, r2
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	0001      	movs	r1, r0
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	220f      	movs	r2, #15
 80018e4:	4013      	ands	r3, r2
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	000a      	movs	r2, r1
 80018ec:	40da      	lsrs	r2, r3
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x1cc>)
 80018f0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7fe fd9a 	bl	800042c <HAL_InitTick>
  
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b004      	add	sp, #16
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	00001388 	.word	0x00001388
 8001910:	fffff8ff 	.word	0xfffff8ff
 8001914:	08003218 	.word	0x08003218
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08f      	sub	sp, #60	; 0x3c
 8001920:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001922:	2314      	movs	r3, #20
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	4a2b      	ldr	r2, [pc, #172]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001928:	ca13      	ldmia	r2!, {r0, r1, r4}
 800192a:	c313      	stmia	r3!, {r0, r1, r4}
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001934:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001936:	c313      	stmia	r3!, {r0, r1, r4}
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	220c      	movs	r2, #12
 800195a:	4013      	ands	r3, r2
 800195c:	2b04      	cmp	r3, #4
 800195e:	d002      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x4a>
 8001960:	2b08      	cmp	r3, #8
 8001962:	d003      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x50>
 8001964:	e02d      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800196a:	e02d      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	220f      	movs	r2, #15
 8001972:	4013      	ands	r3, r2
 8001974:	2214      	movs	r2, #20
 8001976:	18ba      	adds	r2, r7, r2
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	220f      	movs	r2, #15
 8001982:	4013      	ands	r3, r2
 8001984:	1d3a      	adds	r2, r7, #4
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	4013      	ands	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001998:	f7fe fbbe 	bl	8000118 <__udivsi3>
 800199c:	0003      	movs	r3, r0
 800199e:	001a      	movs	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	4353      	muls	r3, r2
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
 80019a6:	e009      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80019a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019aa:	000a      	movs	r2, r1
 80019ac:	0152      	lsls	r2, r2, #5
 80019ae:	1a52      	subs	r2, r2, r1
 80019b0:	0193      	lsls	r3, r2, #6
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	185b      	adds	r3, r3, r1
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c0:	e002      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b00f      	add	sp, #60	; 0x3c
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	080031f0 	.word	0x080031f0
 80019d8:	08003200 	.word	0x08003200
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019fc:	f7ff fff2 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a00:	0001      	movs	r1, r0
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	2207      	movs	r2, #7
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	40d9      	lsrs	r1, r3
 8001a12:	000b      	movs	r3, r1
}    
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08003228 	.word	0x08003228

08001a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	025b      	lsls	r3, r3, #9
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a40:	e08f      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2317      	movs	r3, #23
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	055b      	lsls	r3, r3, #21
 8001a52:	4013      	ands	r3, r2
 8001a54:	d111      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0549      	lsls	r1, r1, #21
 8001a60:	430a      	orrs	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
 8001a64:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2317      	movs	r3, #23
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	d11a      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b49      	ldr	r3, [pc, #292]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0049      	lsls	r1, r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a94:	f7fe fcf2 	bl	800047c <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7fe fced 	bl	800047c <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e077      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	23c0      	movs	r3, #192	; 0xc0
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d034      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d02c      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ade:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a33      	ldr	r2, [pc, #204]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ae8:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aea:	6a1a      	ldr	r2, [r3, #32]
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0249      	lsls	r1, r1, #9
 8001af2:	430a      	orrs	r2, r1
 8001af4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af8:	6a1a      	ldr	r2, [r3, #32]
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afc:	492d      	ldr	r1, [pc, #180]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe fcb4 	bl	800047c <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	e009      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7fe fcaf 	bl	800047c <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e038      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b4c:	2317      	movs	r3, #23
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b5c:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	2203      	movs	r2, #3
 8001b72:	4393      	bics	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	4013      	ands	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	2210      	movs	r2, #16
 8001b90:	4393      	bics	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b006      	add	sp, #24
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	fffffcff 	.word	0xfffffcff
 8001bb4:	fffeffff 	.word	0xfffeffff
 8001bb8:	00001388 	.word	0x00001388
 8001bbc:	efffffff 	.word	0xefffffff

08001bc0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e01e      	b.n	8001c10 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223d      	movs	r2, #61	; 0x3d
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d107      	bne.n	8001bee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223c      	movs	r2, #60	; 0x3c
 8001be2:	2100      	movs	r1, #0
 8001be4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f001 f997 	bl	8002f1c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	223d      	movs	r2, #61	; 0x3d
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	0019      	movs	r1, r3
 8001c00:	0010      	movs	r0, r2
 8001c02:	f000 f959 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	223d      	movs	r2, #61	; 0x3d
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d124      	bne.n	8001caa <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d11d      	bne.n	8001caa <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2203      	movs	r2, #3
 8001c74:	4252      	negs	r2, r2
 8001c76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2203      	movs	r2, #3
 8001c86:	4013      	ands	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f8fa 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001c92:	e007      	b.n	8001ca4 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 f8ed 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f8f9 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d125      	bne.n	8001d04 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d11e      	bne.n	8001d04 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2205      	movs	r2, #5
 8001ccc:	4252      	negs	r2, r2
 8001cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f8cd 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e007      	b.n	8001cfe <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 f8c0 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 f8cc 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d124      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d11d      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2209      	movs	r2, #9
 8001d26:	4252      	negs	r2, r2
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2203      	movs	r2, #3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d004      	beq.n	8001d46 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f8a1 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e007      	b.n	8001d56 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f894 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 f8a0 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2210      	movs	r2, #16
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d125      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2210      	movs	r2, #16
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d11e      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2211      	movs	r2, #17
 8001d7e:	4252      	negs	r2, r2
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2208      	movs	r2, #8
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 f874 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001d9e:	e007      	b.n	8001db0 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f867 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 f873 	bl	8001e96 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10f      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4252      	negs	r2, r2
 8001dda:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 fe10 	bl	8002a04 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b80      	cmp	r3, #128	; 0x80
 8001df0:	d10f      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d108      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2281      	movs	r2, #129	; 0x81
 8001e06:	4252      	negs	r2, r2
 8001e08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 f8c9 	bl	8001fa4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d10f      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d108      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	4252      	negs	r2, r2
 8001e36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f833 	bl	8001ea6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2220      	movs	r2, #32
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d10f      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d108      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2221      	movs	r2, #33	; 0x21
 8001e62:	4252      	negs	r2, r2
 8001e64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 f893 	bl	8001f94 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <TIM_Base_SetConfig+0xc4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x24>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <TIM_Base_SetConfig+0xc8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2270      	movs	r2, #112	; 0x70
 8001ee0:	4393      	bics	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <TIM_Base_SetConfig+0xc4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00f      	beq.n	8001f16 <TIM_Base_SetConfig+0x5e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <TIM_Base_SetConfig+0xc8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00b      	beq.n	8001f16 <TIM_Base_SetConfig+0x5e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <TIM_Base_SetConfig+0xcc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <TIM_Base_SetConfig+0x5e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <TIM_Base_SetConfig+0xd0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d003      	beq.n	8001f16 <TIM_Base_SetConfig+0x5e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <TIM_Base_SetConfig+0xd4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d108      	bne.n	8001f28 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <TIM_Base_SetConfig+0xd8>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	001a      	movs	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <TIM_Base_SetConfig+0xc4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0xae>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <TIM_Base_SetConfig+0xd0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0xae>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <TIM_Base_SetConfig+0xd4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d103      	bne.n	8001f6e <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	615a      	str	r2, [r3, #20]
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40002000 	.word	0x40002000
 8001f88:	40014400 	.word	0x40014400
 8001f8c:	40014800 	.word	0x40014800
 8001f90:	fffffcff 	.word	0xfffffcff

08001f94 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e047      	b.n	8002056 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2269      	movs	r2, #105	; 0x69
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2268      	movs	r2, #104	; 0x68
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 ffe3 	bl	8002fa8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2269      	movs	r2, #105	; 0x69
 8001fe6:	2124      	movs	r1, #36	; 0x24
 8001fe8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f8f1 	bl	80021e4 <UART_SetConfig>
 8002002:	0003      	movs	r3, r0
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e024      	b.n	8002056 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fa42 	bl	80024a0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_UART_Init+0xac>)
 8002028:	400a      	ands	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2108      	movs	r1, #8
 8002038:	438a      	bics	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 fada 	bl	8002608 <UART_CheckIdleState>
 8002054:	0003      	movs	r3, r0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	fffff7ff 	.word	0xfffff7ff

08002064 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	1dbb      	adds	r3, r7, #6
 8002072:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2269      	movs	r2, #105	; 0x69
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b20      	cmp	r3, #32
 8002082:	d000      	beq.n	8002086 <HAL_UART_Transmit+0x22>
 8002084:	e08c      	b.n	80021a0 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_UART_Transmit+0x30>
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e084      	b.n	80021a2 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d109      	bne.n	80020b8 <HAL_UART_Transmit+0x54>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	d001      	beq.n	80020b8 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e074      	b.n	80021a2 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2268      	movs	r2, #104	; 0x68
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Transmit+0x62>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e06d      	b.n	80021a2 <HAL_UART_Transmit+0x13e>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2268      	movs	r2, #104	; 0x68
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2269      	movs	r2, #105	; 0x69
 80020d8:	2121      	movs	r1, #33	; 0x21
 80020da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80020dc:	f7fe f9ce 	bl	800047c <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	2150      	movs	r1, #80	; 0x50
 80020ea:	8812      	ldrh	r2, [r2, #0]
 80020ec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1dba      	adds	r2, r7, #6
 80020f2:	2152      	movs	r1, #82	; 0x52
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80020f8:	e035      	b.n	8002166 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2252      	movs	r2, #82	; 0x52
 80020fe:	5a9b      	ldrh	r3, [r3, r2]
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b299      	uxth	r1, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2252      	movs	r2, #82	; 0x52
 800210a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	0013      	movs	r3, r2
 8002116:	2200      	movs	r2, #0
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	f000 fa8d 	bl	8002638 <UART_WaitOnFlagUntilTimeout>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e03d      	b.n	80021a2 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	015b      	lsls	r3, r3, #5
 800212e:	429a      	cmp	r2, r3
 8002130:	d111      	bne.n	8002156 <HAL_UART_Transmit+0xf2>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10d      	bne.n	8002156 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	05d2      	lsls	r2, r2, #23
 8002148:	0dd2      	lsrs	r2, r2, #23
 800214a:	b292      	uxth	r2, r2
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3302      	adds	r3, #2
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	e007      	b.n	8002166 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	60ba      	str	r2, [r7, #8]
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b292      	uxth	r2, r2
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2252      	movs	r2, #82	; 0x52
 800216a:	5a9b      	ldrh	r3, [r3, r2]
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1c3      	bne.n	80020fa <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	0013      	movs	r3, r2
 800217c:	2200      	movs	r2, #0
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	f000 fa5a 	bl	8002638 <UART_WaitOnFlagUntilTimeout>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e00a      	b.n	80021a2 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2269      	movs	r2, #105	; 0x69
 8002190:	2120      	movs	r1, #32
 8002192:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2268      	movs	r2, #104	; 0x68
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b006      	add	sp, #24
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2269      	movs	r2, #105	; 0x69
 80021be:	5c9b      	ldrb	r3, [r3, r2]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	226a      	movs	r2, #106	; 0x6a
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b2db      	uxtb	r3, r3
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80021f0:	2317      	movs	r3, #23
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2210      	movs	r2, #16
 80021f6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80021f8:	230a      	movs	r3, #10
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002200:	2314      	movs	r3, #20
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002208:	2313      	movs	r3, #19
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a96      	ldr	r2, [pc, #600]	; (8002488 <UART_SetConfig+0x2a4>)
 8002230:	4013      	ands	r3, r2
 8002232:	0019      	movs	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a91      	ldr	r2, [pc, #580]	; (800248c <UART_SetConfig+0x2a8>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a89      	ldr	r2, [pc, #548]	; (8002490 <UART_SetConfig+0x2ac>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002278:	4b86      	ldr	r3, [pc, #536]	; (8002494 <UART_SetConfig+0x2b0>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	2203      	movs	r2, #3
 800227e:	4013      	ands	r3, r2
 8002280:	2b01      	cmp	r3, #1
 8002282:	d00f      	beq.n	80022a4 <UART_SetConfig+0xc0>
 8002284:	d304      	bcc.n	8002290 <UART_SetConfig+0xac>
 8002286:	2b02      	cmp	r3, #2
 8002288:	d011      	beq.n	80022ae <UART_SetConfig+0xca>
 800228a:	2b03      	cmp	r3, #3
 800228c:	d005      	beq.n	800229a <UART_SetConfig+0xb6>
 800228e:	e013      	b.n	80022b8 <UART_SetConfig+0xd4>
 8002290:	2317      	movs	r3, #23
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e012      	b.n	80022c0 <UART_SetConfig+0xdc>
 800229a:	2317      	movs	r3, #23
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e00d      	b.n	80022c0 <UART_SetConfig+0xdc>
 80022a4:	2317      	movs	r3, #23
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2204      	movs	r2, #4
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e008      	b.n	80022c0 <UART_SetConfig+0xdc>
 80022ae:	2317      	movs	r3, #23
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2208      	movs	r2, #8
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e003      	b.n	80022c0 <UART_SetConfig+0xdc>
 80022b8:	2317      	movs	r3, #23
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2210      	movs	r2, #16
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d000      	beq.n	80022d0 <UART_SetConfig+0xec>
 80022ce:	e077      	b.n	80023c0 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 80022d0:	2317      	movs	r3, #23
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d01c      	beq.n	8002314 <UART_SetConfig+0x130>
 80022da:	dc02      	bgt.n	80022e2 <UART_SetConfig+0xfe>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <UART_SetConfig+0x108>
 80022e0:	e04f      	b.n	8002382 <UART_SetConfig+0x19e>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d027      	beq.n	8002336 <UART_SetConfig+0x152>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d039      	beq.n	800235e <UART_SetConfig+0x17a>
 80022ea:	e04a      	b.n	8002382 <UART_SetConfig+0x19e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022ec:	f7ff fb84 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80022f0:	0003      	movs	r3, r0
 80022f2:	005a      	lsls	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	18d2      	adds	r2, r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0019      	movs	r1, r3
 8002302:	0010      	movs	r0, r2
 8002304:	f7fd ff08 	bl	8000118 <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	001a      	movs	r2, r3
 800230c:	2314      	movs	r3, #20
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	801a      	strh	r2, [r3, #0]
        break;
 8002312:	e03b      	b.n	800238c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	4a5f      	ldr	r2, [pc, #380]	; (8002498 <UART_SetConfig+0x2b4>)
 800231c:	189a      	adds	r2, r3, r2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0019      	movs	r1, r3
 8002324:	0010      	movs	r0, r2
 8002326:	f7fd fef7 	bl	8000118 <__udivsi3>
 800232a:	0003      	movs	r3, r0
 800232c:	001a      	movs	r2, r3
 800232e:	2314      	movs	r3, #20
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	801a      	strh	r2, [r3, #0]
        break;
 8002334:	e02a      	b.n	800238c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002336:	f7ff faf1 	bl	800191c <HAL_RCC_GetSysClockFreq>
 800233a:	0003      	movs	r3, r0
 800233c:	005a      	lsls	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	18d2      	adds	r2, r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0019      	movs	r1, r3
 800234c:	0010      	movs	r0, r2
 800234e:	f7fd fee3 	bl	8000118 <__udivsi3>
 8002352:	0003      	movs	r3, r0
 8002354:	001a      	movs	r2, r3
 8002356:	2314      	movs	r3, #20
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	801a      	strh	r2, [r3, #0]
        break;
 800235c:	e016      	b.n	800238c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	0252      	lsls	r2, r2, #9
 8002368:	189a      	adds	r2, r3, r2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0019      	movs	r1, r3
 8002370:	0010      	movs	r0, r2
 8002372:	f7fd fed1 	bl	8000118 <__udivsi3>
 8002376:	0003      	movs	r3, r0
 8002378:	001a      	movs	r2, r3
 800237a:	2314      	movs	r3, #20
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	801a      	strh	r2, [r3, #0]
        break;
 8002380:	e004      	b.n	800238c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002382:	2313      	movs	r3, #19
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
        break;
 800238a:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 800238c:	200a      	movs	r0, #10
 800238e:	183b      	adds	r3, r7, r0
 8002390:	2414      	movs	r4, #20
 8002392:	193a      	adds	r2, r7, r4
 8002394:	8812      	ldrh	r2, [r2, #0]
 8002396:	210f      	movs	r1, #15
 8002398:	438a      	bics	r2, r1
 800239a:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800239c:	193b      	adds	r3, r7, r4
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	105b      	asrs	r3, r3, #1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2207      	movs	r2, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	b299      	uxth	r1, r3
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	183a      	adds	r2, r7, r0
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	183a      	adds	r2, r7, r0
 80023ba:	8812      	ldrh	r2, [r2, #0]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	e05b      	b.n	8002478 <UART_SetConfig+0x294>
  }
  else
  {
    switch (clocksource)
 80023c0:	2317      	movs	r3, #23
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d01b      	beq.n	8002402 <UART_SetConfig+0x21e>
 80023ca:	dc02      	bgt.n	80023d2 <UART_SetConfig+0x1ee>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <UART_SetConfig+0x1f8>
 80023d0:	e04d      	b.n	800246e <UART_SetConfig+0x28a>
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d026      	beq.n	8002424 <UART_SetConfig+0x240>
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d037      	beq.n	800244a <UART_SetConfig+0x266>
 80023da:	e048      	b.n	800246e <UART_SetConfig+0x28a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023dc:	f7ff fb0c 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80023e0:	0002      	movs	r2, r0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	18d2      	adds	r2, r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0019      	movs	r1, r3
 80023f0:	0010      	movs	r0, r2
 80023f2:	f7fd fe91 	bl	8000118 <__udivsi3>
 80023f6:	0003      	movs	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60da      	str	r2, [r3, #12]
        break;
 8002400:	e03a      	b.n	8002478 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <UART_SetConfig+0x2b8>)
 800240a:	189a      	adds	r2, r3, r2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0019      	movs	r1, r3
 8002412:	0010      	movs	r0, r2
 8002414:	f7fd fe80 	bl	8000118 <__udivsi3>
 8002418:	0003      	movs	r3, r0
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60da      	str	r2, [r3, #12]
        break;
 8002422:	e029      	b.n	8002478 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002424:	f7ff fa7a 	bl	800191c <HAL_RCC_GetSysClockFreq>
 8002428:	0002      	movs	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	18d2      	adds	r2, r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	0019      	movs	r1, r3
 8002438:	0010      	movs	r0, r2
 800243a:	f7fd fe6d 	bl	8000118 <__udivsi3>
 800243e:	0003      	movs	r3, r0
 8002440:	b29a      	uxth	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60da      	str	r2, [r3, #12]
        break;
 8002448:	e016      	b.n	8002478 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	0212      	lsls	r2, r2, #8
 8002454:	189a      	adds	r2, r3, r2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0019      	movs	r1, r3
 800245c:	0010      	movs	r0, r2
 800245e:	f7fd fe5b 	bl	8000118 <__udivsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60da      	str	r2, [r3, #12]
        break;
 800246c:	e004      	b.n	8002478 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800246e:	2313      	movs	r3, #19
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
        break;
 8002476:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002478:	2313      	movs	r3, #19
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]

}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b007      	add	sp, #28
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	ffff69f3 	.word	0xffff69f3
 800248c:	ffffcfff 	.word	0xffffcfff
 8002490:	fffff4ff 	.word	0xfffff4ff
 8002494:	40021000 	.word	0x40021000
 8002498:	00f42400 	.word	0x00f42400
 800249c:	007a1200 	.word	0x007a1200

080024a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2201      	movs	r2, #1
 80024ae:	4013      	ands	r3, r2
 80024b0:	d00b      	beq.n	80024ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <UART_AdvFeatureConfig+0x144>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00b      	beq.n	80024ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <UART_AdvFeatureConfig+0x148>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2204      	movs	r2, #4
 80024f2:	4013      	ands	r3, r2
 80024f4:	d00b      	beq.n	800250e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <UART_AdvFeatureConfig+0x14c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2208      	movs	r2, #8
 8002514:	4013      	ands	r3, r2
 8002516:	d00b      	beq.n	8002530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a34      	ldr	r2, [pc, #208]	; (80025f0 <UART_AdvFeatureConfig+0x150>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2210      	movs	r2, #16
 8002536:	4013      	ands	r3, r2
 8002538:	d00b      	beq.n	8002552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <UART_AdvFeatureConfig+0x154>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	d00b      	beq.n	8002574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <UART_AdvFeatureConfig+0x158>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	d01d      	beq.n	80025ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <UART_AdvFeatureConfig+0x15c>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	035b      	lsls	r3, r3, #13
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10b      	bne.n	80025ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <UART_AdvFeatureConfig+0x160>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	4013      	ands	r3, r2
 80025c2:	d00b      	beq.n	80025dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <UART_AdvFeatureConfig+0x164>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
  }
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b002      	add	sp, #8
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fffdffff 	.word	0xfffdffff
 80025e8:	fffeffff 	.word	0xfffeffff
 80025ec:	fffbffff 	.word	0xfffbffff
 80025f0:	ffff7fff 	.word	0xffff7fff
 80025f4:	ffffefff 	.word	0xffffefff
 80025f8:	ffffdfff 	.word	0xffffdfff
 80025fc:	ffefffff 	.word	0xffefffff
 8002600:	ff9fffff 	.word	0xff9fffff
 8002604:	fff7ffff 	.word	0xfff7ffff

08002608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2269      	movs	r2, #105	; 0x69
 800261a:	2120      	movs	r1, #32
 800261c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	226a      	movs	r2, #106	; 0x6a
 8002622:	2120      	movs	r1, #32
 8002624:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2268      	movs	r2, #104	; 0x68
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002648:	e02b      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	3301      	adds	r3, #1
 800264e:	d028      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002656:	f7fd ff11 	bl	800047c <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	429a      	cmp	r2, r3
 8002664:	d21d      	bcs.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <UART_WaitOnFlagUntilTimeout+0x94>)
 8002672:	400a      	ands	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	438a      	bics	r2, r1
 8002684:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2269      	movs	r2, #105	; 0x69
 800268a:	2120      	movs	r1, #32
 800268c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	226a      	movs	r2, #106	; 0x6a
 8002692:	2120      	movs	r1, #32
 8002694:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2268      	movs	r2, #104	; 0x68
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e00f      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	425a      	negs	r2, r3
 80026b2:	4153      	adcs	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	001a      	movs	r2, r3
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d0c4      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	fffffe5f 	.word	0xfffffe5f

080026d0 <main>:
//char msg[6] = {(value1t/1000)%10 + 48, (value1t/100)%10 + 48, (value1t/10)%10 + 48 , value1t%10 + 48};
//sendData(msg,strlen(msg));
// HAL_TIM_Base_Stop_IT(&htim14);

int main(void)
{
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	b08b      	sub	sp, #44	; 0x2c
 80026d4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d6:	f7fd fe95 	bl	8000404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026da:	f000 fa3b 	bl	8002b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026de:	f000 fb95 	bl	8002e0c <MX_GPIO_Init>
  MX_ADC_Init();
 80026e2:	f000 fa95 	bl	8002c10 <MX_ADC_Init>
  MX_TIM14_Init();
 80026e6:	f000 fb15 	bl	8002d14 <MX_TIM14_Init>
  MX_TIM16_Init();
 80026ea:	f000 fb37 	bl	8002d5c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80026ee:	f000 fb5d 	bl	8002dac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //sensores e vel via 1
  uint16_t sensor0 = 0;
 80026f2:	2322      	movs	r3, #34	; 0x22
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2200      	movs	r2, #0
 80026f8:	801a      	strh	r2, [r3, #0]
  uint16_t sensor1 = 0;
 80026fa:	2320      	movs	r3, #32
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	801a      	strh	r2, [r3, #0]
  uint16_t vel1 = 0;
 8002702:	2326      	movs	r3, #38	; 0x26
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2200      	movs	r2, #0
 8002708:	801a      	strh	r2, [r3, #0]

  //sensores e vel via 2
  uint16_t sensor6 = 0;
 800270a:	231e      	movs	r3, #30
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]
  uint16_t sensor5 = 0;
 8002712:	231c      	movs	r3, #28
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2200      	movs	r2, #0
 8002718:	801a      	strh	r2, [r3, #0]
  uint16_t vel2 = 0;
 800271a:	2324      	movs	r3, #36	; 0x24
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2200      	movs	r2, #0
 8002720:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Início do Clock
  HAL_TIM_Base_Start_IT(&htim14);
 8002722:	4ba1      	ldr	r3, [pc, #644]	; (80029a8 <main+0x2d8>)
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff fa77 	bl	8001c18 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
	  //Leitura da  Via 1
	  sensor0 = readv( (uint16_t) 0);
 800272a:	2522      	movs	r5, #34	; 0x22
 800272c:	197c      	adds	r4, r7, r5
 800272e:	2000      	movs	r0, #0
 8002730:	f000 f98c 	bl	8002a4c <readv>
 8002734:	0003      	movs	r3, r0
 8002736:	8023      	strh	r3, [r4, #0]
	  sensor1 = readv( (uint16_t) 1);
 8002738:	2320      	movs	r3, #32
 800273a:	18fc      	adds	r4, r7, r3
 800273c:	2001      	movs	r0, #1
 800273e:	f000 f985 	bl	8002a4c <readv>
 8002742:	0003      	movs	r3, r0
 8002744:	8023      	strh	r3, [r4, #0]
	  //Leitura da  Via 2
	  sensor6 = readv( (uint16_t) 6);
 8002746:	231e      	movs	r3, #30
 8002748:	18fc      	adds	r4, r7, r3
 800274a:	2006      	movs	r0, #6
 800274c:	f000 f97e 	bl	8002a4c <readv>
 8002750:	0003      	movs	r3, r0
 8002752:	8023      	strh	r3, [r4, #0]
	  sensor5 = readv( (uint16_t) 5);
 8002754:	231c      	movs	r3, #28
 8002756:	18fc      	adds	r4, r7, r3
 8002758:	2005      	movs	r0, #5
 800275a:	f000 f977 	bl	8002a4c <readv>
 800275e:	0003      	movs	r3, r0
 8002760:	8023      	strh	r3, [r4, #0]

	  if(sensor0 > (uint16_t) 2700 ) {// Start CronoTrigger via 1
 8002762:	197b      	adds	r3, r7, r5
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	4a91      	ldr	r2, [pc, #580]	; (80029ac <main+0x2dc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d905      	bls.n	8002778 <main+0xa8>
		  mSec1 = 0;
 800276c:	4b90      	ldr	r3, [pc, #576]	; (80029b0 <main+0x2e0>)
 800276e:	2200      	movs	r2, #0
 8002770:	801a      	strh	r2, [r3, #0]
		  setTimerCount1 = 1;
 8002772:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <main+0x2e4>)
 8002774:	2201      	movs	r2, #1
 8002776:	801a      	strh	r2, [r3, #0]
	  }
	  if(sensor1 > (uint16_t) 2700 ) {// Stop CronoTrigger via 1 & envio de dados
 8002778:	2320      	movs	r3, #32
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	4a8b      	ldr	r2, [pc, #556]	; (80029ac <main+0x2dc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d800      	bhi.n	8002786 <main+0xb6>
 8002784:	e07d      	b.n	8002882 <main+0x1b2>
		  setTimerCount1 = 0;
 8002786:	4b8b      	ldr	r3, [pc, #556]	; (80029b4 <main+0x2e4>)
 8002788:	2200      	movs	r2, #0
 800278a:	801a      	strh	r2, [r3, #0]

		  vel1 = (15000)/(mSec1);
 800278c:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <main+0x2e0>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	0019      	movs	r1, r3
 8002792:	4889      	ldr	r0, [pc, #548]	; (80029b8 <main+0x2e8>)
 8002794:	f7fd fd4a 	bl	800022c <__divsi3>
 8002798:	0003      	movs	r3, r0
 800279a:	001a      	movs	r2, r3
 800279c:	2526      	movs	r5, #38	; 0x26
 800279e:	197b      	adds	r3, r7, r5
 80027a0:	801a      	strh	r2, [r3, #0]

		  char choice = fastest_road(vel1, vel2);
 80027a2:	231b      	movs	r3, #27
 80027a4:	18fc      	adds	r4, r7, r3
 80027a6:	2624      	movs	r6, #36	; 0x24
 80027a8:	19bb      	adds	r3, r7, r6
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	197b      	adds	r3, r7, r5
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f906 	bl	80029c4 <fastest_road>
 80027b8:	0003      	movs	r3, r0
 80027ba:	7023      	strb	r3, [r4, #0]

		  char msg[9] = {(vel1/10)%10 + 48, (vel1)%10 + 48, '|', (vel2/10)%10 + 48, (vel2)%10 + 48, '|', choice };
 80027bc:	2410      	movs	r4, #16
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	0018      	movs	r0, r3
 80027c2:	2309      	movs	r3, #9
 80027c4:	001a      	movs	r2, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	f000 fcfe 	bl	80031c8 <memset>
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	210a      	movs	r1, #10
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fd fca0 	bl	8000118 <__udivsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	b29b      	uxth	r3, r3
 80027dc:	210a      	movs	r1, #10
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fd fd20 	bl	8000224 <__aeabi_uidivmod>
 80027e4:	000b      	movs	r3, r1
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3330      	adds	r3, #48	; 0x30
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	193b      	adds	r3, r7, r4
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	197b      	adds	r3, r7, r5
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	210a      	movs	r1, #10
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fd fd13 	bl	8000224 <__aeabi_uidivmod>
 80027fe:	000b      	movs	r3, r1
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3330      	adds	r3, #48	; 0x30
 8002806:	b2da      	uxtb	r2, r3
 8002808:	193b      	adds	r3, r7, r4
 800280a:	705a      	strb	r2, [r3, #1]
 800280c:	193b      	adds	r3, r7, r4
 800280e:	227c      	movs	r2, #124	; 0x7c
 8002810:	709a      	strb	r2, [r3, #2]
 8002812:	19bb      	adds	r3, r7, r6
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	210a      	movs	r1, #10
 8002818:	0018      	movs	r0, r3
 800281a:	f7fd fc7d 	bl	8000118 <__udivsi3>
 800281e:	0003      	movs	r3, r0
 8002820:	b29b      	uxth	r3, r3
 8002822:	210a      	movs	r1, #10
 8002824:	0018      	movs	r0, r3
 8002826:	f7fd fcfd 	bl	8000224 <__aeabi_uidivmod>
 800282a:	000b      	movs	r3, r1
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3330      	adds	r3, #48	; 0x30
 8002832:	b2da      	uxtb	r2, r3
 8002834:	193b      	adds	r3, r7, r4
 8002836:	70da      	strb	r2, [r3, #3]
 8002838:	19bb      	adds	r3, r7, r6
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	210a      	movs	r1, #10
 800283e:	0018      	movs	r0, r3
 8002840:	f7fd fcf0 	bl	8000224 <__aeabi_uidivmod>
 8002844:	000b      	movs	r3, r1
 8002846:	b29b      	uxth	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3330      	adds	r3, #48	; 0x30
 800284c:	b2da      	uxtb	r2, r3
 800284e:	193b      	adds	r3, r7, r4
 8002850:	711a      	strb	r2, [r3, #4]
 8002852:	193b      	adds	r3, r7, r4
 8002854:	227c      	movs	r2, #124	; 0x7c
 8002856:	715a      	strb	r2, [r3, #5]
 8002858:	193b      	adds	r3, r7, r4
 800285a:	221b      	movs	r2, #27
 800285c:	18ba      	adds	r2, r7, r2
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	719a      	strb	r2, [r3, #6]
		  sendData(msg,strlen(msg));
 8002862:	193b      	adds	r3, r7, r4
 8002864:	0018      	movs	r0, r3
 8002866:	f7fd fc4f 	bl	8000108 <strlen>
 800286a:	0003      	movs	r3, r0
 800286c:	001a      	movs	r2, r3
 800286e:	193b      	adds	r3, r7, r4
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f944 	bl	8002b00 <sendData>
		  //HAL_UART_Transmit(&huart1, (uint8_t *) msg,strlen(msg), 100);
		  HAL_Delay(500);
 8002878:	23fa      	movs	r3, #250	; 0xfa
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	0018      	movs	r0, r3
 800287e:	f7fd fe07 	bl	8000490 <HAL_Delay>
	  }

//-------------------------------------------------------------//

	  if(sensor6 > (uint16_t) 2700 ) {// Start CronoTrigger via 2
 8002882:	231e      	movs	r3, #30
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	4a48      	ldr	r2, [pc, #288]	; (80029ac <main+0x2dc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d905      	bls.n	800289a <main+0x1ca>
		  mSec2 = 0;
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <main+0x2ec>)
 8002890:	2200      	movs	r2, #0
 8002892:	801a      	strh	r2, [r3, #0]
		  setTimerCount2 = 1;
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <main+0x2f0>)
 8002896:	2201      	movs	r2, #1
 8002898:	801a      	strh	r2, [r3, #0]
	  }
	  if(sensor5 > (uint16_t) 2700 ) {// Stop CronoTrigger via 2 & envio de dados
 800289a:	231c      	movs	r3, #28
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	4a42      	ldr	r2, [pc, #264]	; (80029ac <main+0x2dc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d800      	bhi.n	80028a8 <main+0x1d8>
 80028a6:	e740      	b.n	800272a <main+0x5a>
		  setTimerCount2 = 0;
 80028a8:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <main+0x2f0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	801a      	strh	r2, [r3, #0]

		  vel2 = (15000)/(mSec2);
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <main+0x2ec>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	0019      	movs	r1, r3
 80028b4:	4840      	ldr	r0, [pc, #256]	; (80029b8 <main+0x2e8>)
 80028b6:	f7fd fcb9 	bl	800022c <__divsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	001a      	movs	r2, r3
 80028be:	2524      	movs	r5, #36	; 0x24
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	801a      	strh	r2, [r3, #0]

		  char choice = fastest_road(vel1, vel2);
 80028c4:	231a      	movs	r3, #26
 80028c6:	18fc      	adds	r4, r7, r3
 80028c8:	197b      	adds	r3, r7, r5
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	2626      	movs	r6, #38	; 0x26
 80028ce:	19bb      	adds	r3, r7, r6
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 f875 	bl	80029c4 <fastest_road>
 80028da:	0003      	movs	r3, r0
 80028dc:	7023      	strb	r3, [r4, #0]

		  char msg[9] = {(vel1/10)%10 + 48, (vel1)%10 + 48, '|', (vel2/10)%10 + 48, (vel2)%10 + 48, '|', choice };
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	0018      	movs	r0, r3
 80028e2:	2309      	movs	r3, #9
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f000 fc6e 	bl	80031c8 <memset>
 80028ec:	0034      	movs	r4, r6
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	210a      	movs	r1, #10
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fd fc0f 	bl	8000118 <__udivsi3>
 80028fa:	0003      	movs	r3, r0
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	210a      	movs	r1, #10
 8002900:	0018      	movs	r0, r3
 8002902:	f7fd fc8f 	bl	8000224 <__aeabi_uidivmod>
 8002906:	000b      	movs	r3, r1
 8002908:	b29b      	uxth	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3330      	adds	r3, #48	; 0x30
 800290e:	b2da      	uxtb	r2, r3
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	193b      	adds	r3, r7, r4
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	210a      	movs	r1, #10
 800291a:	0018      	movs	r0, r3
 800291c:	f7fd fc82 	bl	8000224 <__aeabi_uidivmod>
 8002920:	000b      	movs	r3, r1
 8002922:	b29b      	uxth	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3330      	adds	r3, #48	; 0x30
 8002928:	b2da      	uxtb	r2, r3
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	705a      	strb	r2, [r3, #1]
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	227c      	movs	r2, #124	; 0x7c
 8002932:	709a      	strb	r2, [r3, #2]
 8002934:	197b      	adds	r3, r7, r5
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	210a      	movs	r1, #10
 800293a:	0018      	movs	r0, r3
 800293c:	f7fd fbec 	bl	8000118 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	b29b      	uxth	r3, r3
 8002944:	210a      	movs	r1, #10
 8002946:	0018      	movs	r0, r3
 8002948:	f7fd fc6c 	bl	8000224 <__aeabi_uidivmod>
 800294c:	000b      	movs	r3, r1
 800294e:	b29b      	uxth	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3330      	adds	r3, #48	; 0x30
 8002954:	b2da      	uxtb	r2, r3
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	70da      	strb	r2, [r3, #3]
 800295a:	197b      	adds	r3, r7, r5
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	210a      	movs	r1, #10
 8002960:	0018      	movs	r0, r3
 8002962:	f7fd fc5f 	bl	8000224 <__aeabi_uidivmod>
 8002966:	000b      	movs	r3, r1
 8002968:	b29b      	uxth	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3330      	adds	r3, #48	; 0x30
 800296e:	b2da      	uxtb	r2, r3
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	711a      	strb	r2, [r3, #4]
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	227c      	movs	r2, #124	; 0x7c
 8002978:	715a      	strb	r2, [r3, #5]
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	221a      	movs	r2, #26
 800297e:	18ba      	adds	r2, r7, r2
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	719a      	strb	r2, [r3, #6]
		  sendData(msg,strlen(msg));
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd fbbe 	bl	8000108 <strlen>
 800298c:	0003      	movs	r3, r0
 800298e:	001a      	movs	r2, r3
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	0011      	movs	r1, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f000 f8b3 	bl	8002b00 <sendData>
		  //HAL_UART_Transmit(&huart1, (uint8_t *) msg,strlen(msg), 100);
		  HAL_Delay(500);
 800299a:	23fa      	movs	r3, #250	; 0xfa
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	0018      	movs	r0, r3
 80029a0:	f7fd fd76 	bl	8000490 <HAL_Delay>
	  sensor0 = readv( (uint16_t) 0);
 80029a4:	e6c1      	b.n	800272a <main+0x5a>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	2000009c 	.word	0x2000009c
 80029ac:	00000a8c 	.word	0x00000a8c
 80029b0:	20000020 	.word	0x20000020
 80029b4:	20000024 	.word	0x20000024
 80029b8:	00003a98 	.word	0x00003a98
 80029bc:	20000022 	.word	0x20000022
 80029c0:	20000026 	.word	0x20000026

080029c4 <fastest_road>:
  /* USER CODE END 3 */
}


// Função que calcula a via mais rapida
char fastest_road(uint16_t v1, uint16_t v2){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	0002      	movs	r2, r0
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	1c0a      	adds	r2, r1, #0
 80029d4:	801a      	strh	r2, [r3, #0]
	char best_road;
	if (v1 > v2){
 80029d6:	1dba      	adds	r2, r7, #6
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	8812      	ldrh	r2, [r2, #0]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d904      	bls.n	80029ec <fastest_road+0x28>
		best_road = '1';
 80029e2:	230f      	movs	r3, #15
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2231      	movs	r2, #49	; 0x31
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e003      	b.n	80029f4 <fastest_road+0x30>
	}
	else{
		best_road = '2';
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2232      	movs	r2, #50	; 0x32
 80029f2:	701a      	strb	r2, [r3, #0]
	}

	return best_road;
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_PeriodElapsedCallback>:

// Função executada quando o Timer Termina um ciclo
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim14){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	if (setTimerCount1){
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_TIM_PeriodElapsedCallback+0x1c>
		mSec1 = mSec1 + 1;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a1e:	801a      	strh	r2, [r3, #0]
	}
	if (setTimerCount2){
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_TIM_PeriodElapsedCallback+0x30>
		mSec2 = mSec2 + 1;
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002a32:	801a      	strh	r2, [r3, #0]
	}

	//tBlock = tBlock + 1;
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000024 	.word	0x20000024
 8002a40:	20000020 	.word	0x20000020
 8002a44:	20000026 	.word	0x20000026
 8002a48:	20000022 	.word	0x20000022

08002a4c <readv>:


// Função Para leitura dos sensores
uint16_t readv(uint16_t number){
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	0002      	movs	r2, r0
 8002a54:	1dbb      	adds	r3, r7, #6
 8002a56:	801a      	strh	r2, [r3, #0]
	ADC_ChannelConfTypeDef chConfig = {0};
 8002a58:	2308      	movs	r3, #8
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	230c      	movs	r3, #12
 8002a60:	001a      	movs	r2, r3
 8002a62:	2100      	movs	r1, #0
 8002a64:	f000 fbb0 	bl	80031c8 <memset>
	switch(number){
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d00d      	beq.n	8002a8c <readv+0x40>
 8002a70:	dc02      	bgt.n	8002a78 <readv+0x2c>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <readv+0x36>
			break;
		case 6:
			chConfig.Channel = ADC_CHANNEL_6;
			break;
		default:
			break;
 8002a76:	e018      	b.n	8002aaa <readv+0x5e>
	switch(number){
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d00c      	beq.n	8002a96 <readv+0x4a>
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d00f      	beq.n	8002aa0 <readv+0x54>
			break;
 8002a80:	e013      	b.n	8002aaa <readv+0x5e>
			chConfig.Channel = ADC_CHANNEL_0;
 8002a82:	2308      	movs	r3, #8
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
			break;
 8002a8a:	e00e      	b.n	8002aaa <readv+0x5e>
			chConfig.Channel = ADC_CHANNEL_1;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
			break;
 8002a94:	e009      	b.n	8002aaa <readv+0x5e>
			chConfig.Channel = ADC_CHANNEL_5;
 8002a96:	2308      	movs	r3, #8
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2205      	movs	r2, #5
 8002a9c:	601a      	str	r2, [r3, #0]
			break;
 8002a9e:	e004      	b.n	8002aaa <readv+0x5e>
			chConfig.Channel = ADC_CHANNEL_6;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2206      	movs	r2, #6
 8002aa6:	601a      	str	r2, [r3, #0]
			break;
 8002aa8:	46c0      	nop			; (mov r8, r8)
	}
    HAL_ADC_ConfigChannel(&hadc, &chConfig);
 8002aaa:	2408      	movs	r4, #8
 8002aac:	193a      	adds	r2, r7, r4
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <readv+0xac>)
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7fd fee8 	bl	8000888 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc);
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <readv+0xac>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd fe44 	bl	8000748 <HAL_ADC_Start>
    uint16_t v = HAL_ADC_GetValue(&hadc);
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <readv+0xac>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fd fed4 	bl	8000870 <HAL_ADC_GetValue>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	2516      	movs	r5, #22
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc);
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <readv+0xac>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7fd fe8c 	bl	80007f0 <HAL_ADC_Stop>
	chConfig.Rank = ADC_RANK_NONE;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <readv+0xb0>)
 8002adc:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &chConfig);
 8002ade:	193a      	adds	r2, r7, r4
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <readv+0xac>)
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fd fecf 	bl	8000888 <HAL_ADC_ConfigChannel>
    return v;
 8002aea:	197b      	adds	r3, r7, r5
 8002aec:	881b      	ldrh	r3, [r3, #0]
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	200000dc 	.word	0x200000dc
 8002afc:	00001001 	.word	0x00001001

08002b00 <sendData>:

// Função Para envio de dados via BT
void sendData(u_int8_t *message,int size) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) INIT_CHAR,sizeof(INIT_CHAR), 100);
 8002b0a:	490f      	ldr	r1, [pc, #60]	; (8002b48 <sendData+0x48>)
 8002b0c:	480f      	ldr	r0, [pc, #60]	; (8002b4c <sendData+0x4c>)
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	2202      	movs	r2, #2
 8002b12:	f7ff faa7 	bl	8002064 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) message,size, 100);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <sendData+0x4c>)
 8002b1e:	2364      	movs	r3, #100	; 0x64
 8002b20:	f7ff faa0 	bl	8002064 <HAL_UART_Transmit>
	while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <sendData+0x4c>)
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7ff fb3e 	bl	80021aa <HAL_UART_GetState>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d1f8      	bne.n	8002b26 <sendData+0x26>
	HAL_UART_Transmit(&huart1, (uint8_t *) END_CHAR,sizeof(END_CHAR) + sizeof(INIT_CHAR), 100);
 8002b34:	4906      	ldr	r1, [pc, #24]	; (8002b50 <sendData+0x50>)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <sendData+0x4c>)
 8002b38:	2364      	movs	r3, #100	; 0x64
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	f7ff fa92 	bl	8002064 <HAL_UART_Transmit>
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08003210 	.word	0x08003210
 8002b4c:	2000002c 	.word	0x2000002c
 8002b50:	08003214 	.word	0x08003214

08002b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b095      	sub	sp, #84	; 0x54
 8002b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b5a:	2420      	movs	r4, #32
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	0018      	movs	r0, r3
 8002b60:	2330      	movs	r3, #48	; 0x30
 8002b62:	001a      	movs	r2, r3
 8002b64:	2100      	movs	r1, #0
 8002b66:	f000 fb2f 	bl	80031c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	0018      	movs	r0, r3
 8002b70:	2310      	movs	r3, #16
 8002b72:	001a      	movs	r2, r3
 8002b74:	2100      	movs	r1, #0
 8002b76:	f000 fb27 	bl	80031c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	2310      	movs	r3, #16
 8002b80:	001a      	movs	r2, r3
 8002b82:	2100      	movs	r1, #0
 8002b84:	f000 fb20 	bl	80031c8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002b88:	0021      	movs	r1, r4
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2212      	movs	r2, #18
 8002b8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2201      	movs	r2, #1
 8002b94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2201      	movs	r2, #1
 8002b9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2200      	movs	r2, #0
 8002bac:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fe fad7 	bl	8001164 <HAL_RCC_OscConfig>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002bba:	f000 f93f 	bl	8002e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2100      	movs	r1, #0
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fe fdb5 	bl	800174c <HAL_RCC_ClockConfig>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d001      	beq.n	8002bea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002be6:	f000 f929 	bl	8002e3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bea:	003b      	movs	r3, r7
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002bf0:	003b      	movs	r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf6:	003b      	movs	r3, r7
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fe ff13 	bl	8001a24 <HAL_RCCEx_PeriphCLKConfig>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d001      	beq.n	8002c06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002c02:	f000 f91b 	bl	8002e3c <Error_Handler>
  }
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b015      	add	sp, #84	; 0x54
 8002c0c:	bd90      	pop	{r4, r7, pc}
	...

08002c10 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	0018      	movs	r0, r3
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	001a      	movs	r2, r3
 8002c1e:	2100      	movs	r1, #0
 8002c20:	f000 fad2 	bl	80031c8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002c24:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <MX_ADC_Init+0x100>)
 8002c28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002c30:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c36:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002c3c:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c42:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c44:	2204      	movs	r2, #4
 8002c46:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c62:	22c2      	movs	r2, #194	; 0xc2
 8002c64:	32ff      	adds	r2, #255	; 0xff
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7fd fc25 	bl	80004cc <HAL_ADC_Init>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8002c86:	f000 f8d9 	bl	8002e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	0152      	lsls	r2, r2, #5
 8002c96:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ca0:	1d3a      	adds	r2, r7, #4
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7fd fdee 	bl	8000888 <HAL_ADC_ConfigChannel>
 8002cac:	1e03      	subs	r3, r0, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002cb0:	f000 f8c4 	bl	8002e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002cba:	1d3a      	adds	r2, r7, #4
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fd fde1 	bl	8000888 <HAL_ADC_ConfigChannel>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d001      	beq.n	8002cce <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002cca:	f000 f8b7 	bl	8002e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2205      	movs	r2, #5
 8002cd2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002cd4:	1d3a      	adds	r2, r7, #4
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fd fdd4 	bl	8000888 <HAL_ADC_ConfigChannel>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002ce4:	f000 f8aa 	bl	8002e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2206      	movs	r2, #6
 8002cec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002cee:	1d3a      	adds	r2, r7, #4
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_ADC_Init+0xfc>)
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fd fdc7 	bl	8000888 <HAL_ADC_ConfigChannel>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8002cfe:	f000 f89d 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	200000dc 	.word	0x200000dc
 8002d10:	40012400 	.word	0x40012400

08002d14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <MX_TIM14_Init+0x44>)
 8002d1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d20:	224f      	movs	r2, #79	; 0x4f
 8002d22:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d2c:	2263      	movs	r2, #99	; 0x63
 8002d2e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <MX_TIM14_Init+0x40>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f7fe ff3e 	bl	8001bc0 <HAL_TIM_Base_Init>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002d48:	f000 f878 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	2000009c 	.word	0x2000009c
 8002d58:	40002000 	.word	0x40002000

08002d5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <MX_TIM16_Init+0x48>)
 8002d64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d68:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <MX_TIM16_Init+0x4c>)
 8002d6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d74:	2263      	movs	r2, #99	; 0x63
 8002d76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <MX_TIM16_Init+0x44>)
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7fe ff17 	bl	8001bc0 <HAL_TIM_Base_Init>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002d96:	f000 f851 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000128 	.word	0x20000128
 8002da4:	40014400 	.word	0x40014400
 8002da8:	00001f3f 	.word	0x00001f3f

08002dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002db2:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <MX_USART1_UART_Init+0x5c>)
 8002db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002db8:	2296      	movs	r2, #150	; 0x96
 8002dba:	0192      	lsls	r2, r2, #6
 8002dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <MX_USART1_UART_Init+0x58>)
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff f8df 	bl	8001fb4 <HAL_UART_Init>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d001      	beq.n	8002dfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002dfa:	f000 f81f 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000002c 	.word	0x2000002c
 8002e08:	40013800 	.word	0x40013800

08002e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MX_GPIO_Init+0x2c>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <MX_GPIO_Init+0x2c>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0289      	lsls	r1, r1, #10
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	615a      	str	r2, [r3, #20]
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <MX_GPIO_Init+0x2c>)
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	4013      	ands	r3, r2
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]

}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000

08002e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_MspInit+0x44>)
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_MspInit+0x44>)
 8002e54:	2101      	movs	r1, #1
 8002e56:	430a      	orrs	r2, r1
 8002e58:	619a      	str	r2, [r3, #24]
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_MspInit+0x44>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_MspInit+0x44>)
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_MspInit+0x44>)
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	0549      	lsls	r1, r1, #21
 8002e70:	430a      	orrs	r2, r1
 8002e72:	61da      	str	r2, [r3, #28]
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_MspInit+0x44>)
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	055b      	lsls	r3, r3, #21
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	2314      	movs	r3, #20
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	2314      	movs	r3, #20
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f000 f990 	bl	80031c8 <memset>
  if(hadc->Instance==ADC1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_ADC_MspInit+0x84>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12c      	bne.n	8002f0c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_ADC_MspInit+0x88>)
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <HAL_ADC_MspInit+0x88>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0089      	lsls	r1, r1, #2
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	619a      	str	r2, [r3, #24]
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_ADC_MspInit+0x88>)
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_ADC_MspInit+0x88>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_ADC_MspInit+0x88>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0289      	lsls	r1, r1, #10
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_ADC_MspInit+0x88>)
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8002eea:	2114      	movs	r1, #20
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	2263      	movs	r2, #99	; 0x63
 8002ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	187a      	adds	r2, r7, r1
 8002f00:	2390      	movs	r3, #144	; 0x90
 8002f02:	05db      	lsls	r3, r3, #23
 8002f04:	0011      	movs	r1, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fd ffb8 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b00a      	add	sp, #40	; 0x28
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40012400 	.word	0x40012400
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <HAL_TIM_Base_MspInit+0x80>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d116      	bne.n	8002f5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_TIM_Base_MspInit+0x84>)
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_TIM_Base_MspInit+0x84>)
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0049      	lsls	r1, r1, #1
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	61da      	str	r2, [r3, #28]
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_TIM_Base_MspInit+0x84>)
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2013      	movs	r0, #19
 8002f50:	f7fd ff62 	bl	8000e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002f54:	2013      	movs	r0, #19
 8002f56:	f7fd ff74 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002f5a:	e01a      	b.n	8002f92 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_TIM_Base_MspInit+0x88>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d115      	bne.n	8002f92 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_TIM_Base_MspInit+0x84>)
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_TIM_Base_MspInit+0x84>)
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	0289      	lsls	r1, r1, #10
 8002f70:	430a      	orrs	r2, r1
 8002f72:	619a      	str	r2, [r3, #24]
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_TIM_Base_MspInit+0x84>)
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	2015      	movs	r0, #21
 8002f88:	f7fd ff46 	bl	8000e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002f8c:	2015      	movs	r0, #21
 8002f8e:	f7fd ff58 	bl	8000e42 <HAL_NVIC_EnableIRQ>
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40002000 	.word	0x40002000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40014400 	.word	0x40014400

08002fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	2314      	movs	r3, #20
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	2314      	movs	r3, #20
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f000 f904 	bl	80031c8 <memset>
  if(huart->Instance==USART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_UART_MspInit+0x90>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d132      	bne.n	8003030 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_UART_MspInit+0x94>)
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_UART_MspInit+0x94>)
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	01c9      	lsls	r1, r1, #7
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	619a      	str	r2, [r3, #24]
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_UART_MspInit+0x94>)
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	01db      	lsls	r3, r3, #7
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_UART_MspInit+0x94>)
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_UART_MspInit+0x94>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	0289      	lsls	r1, r1, #10
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	615a      	str	r2, [r3, #20]
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_UART_MspInit+0x94>)
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	029b      	lsls	r3, r3, #10
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003002:	2114      	movs	r1, #20
 8003004:	187b      	adds	r3, r7, r1
 8003006:	220c      	movs	r2, #12
 8003008:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2202      	movs	r2, #2
 800300e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2203      	movs	r2, #3
 800301a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2201      	movs	r2, #1
 8003020:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	187a      	adds	r2, r7, r1
 8003024:	2390      	movs	r3, #144	; 0x90
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f7fd ff26 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b00a      	add	sp, #40	; 0x28
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40013800 	.word	0x40013800
 800303c:	40021000 	.word	0x40021000

08003040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <HardFault_Handler+0x4>

08003050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003068:	f7fd f9fc 	bl	8000464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <TIM14_IRQHandler+0x14>)
 800307a:	0018      	movs	r0, r3
 800307c:	f7fe fde5 	bl	8001c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	2000009c 	.word	0x2000009c

0800308c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <TIM16_IRQHandler+0x14>)
 8003092:	0018      	movs	r0, r3
 8003094:	f7fe fdd9 	bl	8001c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	20000128 	.word	0x20000128

080030a4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <SystemInit+0x70>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <SystemInit+0x70>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <SystemInit+0x70>)
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <SystemInit+0x70>)
 80030ba:	4917      	ldr	r1, [pc, #92]	; (8003118 <SystemInit+0x74>)
 80030bc:	400a      	ands	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <SystemInit+0x70>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <SystemInit+0x70>)
 80030c6:	4915      	ldr	r1, [pc, #84]	; (800311c <SystemInit+0x78>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <SystemInit+0x70>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <SystemInit+0x70>)
 80030d2:	4913      	ldr	r1, [pc, #76]	; (8003120 <SystemInit+0x7c>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <SystemInit+0x70>)
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <SystemInit+0x70>)
 80030de:	4911      	ldr	r1, [pc, #68]	; (8003124 <SystemInit+0x80>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <SystemInit+0x70>)
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <SystemInit+0x70>)
 80030ea:	210f      	movs	r1, #15
 80030ec:	438a      	bics	r2, r1
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <SystemInit+0x70>)
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <SystemInit+0x70>)
 80030f6:	490c      	ldr	r1, [pc, #48]	; (8003128 <SystemInit+0x84>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SystemInit+0x70>)
 80030fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <SystemInit+0x70>)
 8003102:	2101      	movs	r1, #1
 8003104:	438a      	bics	r2, r1
 8003106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <SystemInit+0x70>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]

}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	08ffb80c 	.word	0x08ffb80c
 800311c:	fef6ffff 	.word	0xfef6ffff
 8003120:	fffbffff 	.word	0xfffbffff
 8003124:	ffc0ffff 	.word	0xffc0ffff
 8003128:	fffffeec 	.word	0xfffffeec

0800312c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800312c:	480d      	ldr	r0, [pc, #52]	; (8003164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800312e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003130:	480d      	ldr	r0, [pc, #52]	; (8003168 <LoopForever+0x6>)
  ldr r1, =_edata
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <LoopForever+0xe>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003148:	4c0b      	ldr	r4, [pc, #44]	; (8003178 <LoopForever+0x16>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003156:	f7ff ffa5 	bl	80030a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800315a:	f000 f811 	bl	8003180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800315e:	f7ff fab7 	bl	80026d0 <main>

08003162 <LoopForever>:

LoopForever:
    b LoopForever
 8003162:	e7fe      	b.n	8003162 <LoopForever>
  ldr   r0, =_estack
 8003164:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800316c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003170:	08003238 	.word	0x08003238
  ldr r2, =_sbss
 8003174:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8003178:	20000168 	.word	0x20000168

0800317c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800317c:	e7fe      	b.n	800317c <ADC1_IRQHandler>
	...

08003180 <__libc_init_array>:
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	2600      	movs	r6, #0
 8003184:	4d0c      	ldr	r5, [pc, #48]	; (80031b8 <__libc_init_array+0x38>)
 8003186:	4c0d      	ldr	r4, [pc, #52]	; (80031bc <__libc_init_array+0x3c>)
 8003188:	1b64      	subs	r4, r4, r5
 800318a:	10a4      	asrs	r4, r4, #2
 800318c:	42a6      	cmp	r6, r4
 800318e:	d109      	bne.n	80031a4 <__libc_init_array+0x24>
 8003190:	2600      	movs	r6, #0
 8003192:	f000 f821 	bl	80031d8 <_init>
 8003196:	4d0a      	ldr	r5, [pc, #40]	; (80031c0 <__libc_init_array+0x40>)
 8003198:	4c0a      	ldr	r4, [pc, #40]	; (80031c4 <__libc_init_array+0x44>)
 800319a:	1b64      	subs	r4, r4, r5
 800319c:	10a4      	asrs	r4, r4, #2
 800319e:	42a6      	cmp	r6, r4
 80031a0:	d105      	bne.n	80031ae <__libc_init_array+0x2e>
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
 80031a4:	00b3      	lsls	r3, r6, #2
 80031a6:	58eb      	ldr	r3, [r5, r3]
 80031a8:	4798      	blx	r3
 80031aa:	3601      	adds	r6, #1
 80031ac:	e7ee      	b.n	800318c <__libc_init_array+0xc>
 80031ae:	00b3      	lsls	r3, r6, #2
 80031b0:	58eb      	ldr	r3, [r5, r3]
 80031b2:	4798      	blx	r3
 80031b4:	3601      	adds	r6, #1
 80031b6:	e7f2      	b.n	800319e <__libc_init_array+0x1e>
 80031b8:	08003230 	.word	0x08003230
 80031bc:	08003230 	.word	0x08003230
 80031c0:	08003230 	.word	0x08003230
 80031c4:	08003234 	.word	0x08003234

080031c8 <memset>:
 80031c8:	0003      	movs	r3, r0
 80031ca:	1812      	adds	r2, r2, r0
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d100      	bne.n	80031d2 <memset+0xa>
 80031d0:	4770      	bx	lr
 80031d2:	7019      	strb	r1, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e7f9      	b.n	80031cc <memset+0x4>

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
